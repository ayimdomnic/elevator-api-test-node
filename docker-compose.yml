services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER:-elevator_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-elevator_pass}
      POSTGRES_DB: ${DB_NAME:-elevator_db}
    ports:
      - "${DB_PORT:-5435}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-elevator_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elevator-network

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT:-6380}:6379" # Redis runs on 6380 externally
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elevator-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - elevator-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc 127.0.0.1 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BROKERS:-kafka:9092}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    networks:
      - elevator-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3000}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-elevator_db}
      - DB_USER=${DB_USER:-elevator_user}
      - DB_PASSWORD=${DB_PASSWORD:-elevator_pass}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6380} # Updated to match external port
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - KAFKA_USERNAME=${KAFKA_USERNAME}
      - KAFKA_PASSWORD=${KAFKA_PASSWORD}
      - KAFKA_SSL=${KAFKA_SSL:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_DIRECTORY=/app/logs
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
      - BUILDING_FLOORS=${BUILDING_FLOORS:-10}
      - MOVE_TIMER_PER_FLOOR=${MOVE_TIMER_PER_FLOOR:-5000}
      - DOOR_OPERATION_TIME=${DOOR_OPERATION_TIME:-2000}
      - MAX_ELEVATORS=${MAX_ELEVATORS:-5}
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - elevator-network
    command: npm run start

volumes:
  postgres_data:
  redis_data:

networks:
  elevator-network:
    driver: bridge